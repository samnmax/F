package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // CSRF 비활성화 (테스트용)
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/", "/index.html", "/user/register", "/register.html", "/css/**", "/js/**").permitAll()
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/login") // 기본 로그인 경로 (자동 제공)
                .defaultSuccessUrl("/", true) // 로그인 성공 후 메인 페이지로
                .permitAll()
            )
            .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/") // 로그아웃 후 메인으로
                .invalidateHttpSession(true)
                .clearAuthentication(true)
            );

        return http.build();
    }
}

package com.example.demo.service;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.*;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    // 사용자 정보를 UserDetails 객체로 반환
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findById(username).orElseThrow(
            () -> new UsernameNotFoundException("사용자 없음")
        );

        return new org.springframework.security.core.userdetails.User(
            user.getUsername(),
            user.getPassword(),
            Collections.emptyList() // 권한 없음
        );
    }
}

package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordConfig {
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

<form id="registerForm">
아이디: <input type="text" id="username"><br>
비밀번호: <input type="password" id="password"><br>
이메일: <input type="email" id="email"><br>
<button type="submit">가입</button>
</form>

@GetMapping("/me")
public Object getMyInfo(Authentication authentication) {
    return authentication != null ? authentication.getPrincipal() : "로그인 필요";
}
